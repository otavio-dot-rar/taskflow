---
description: 
globs: 
alwaysApply: false
---
# Phase 5: Refinements & Advanced Features

## üéØ Objetivo da Fase

Refinar e otimizar o TaskFlow com melhorias de performance, UX e features avan√ßadas.
Esta fase foca em polimento e prepara√ß√£o para uso em produ√ß√£o.

## üìö Refer√™ncias de Documenta√ß√£o

- [State Management](mdc:../docs/state-management.mdc) - Migra√ß√£o para Zustand
- [UI Patterns](mdc:../docs/ui-patterns.mdc) - Timeline e List views
- [Architecture](mdc:../docs/architecture.mdc) - Otimiza√ß√µes de performance

## üìã Overview das Tasks

### **Status Geral: 0% Completo**
- [ ] **Task 5.1:** Zustand Migration (0%)
- [ ] **Task 5.2:** Timeline View (0%)
- [ ] **Task 5.3:** List View (0%)
- [ ] **Task 5.4:** Performance Optimization (0%)
- [ ] **Task 5.5:** Advanced Search & Filters (0%)
- [ ] **Task 5.6:** Export Features (0%)

---

## üîß Task 5.1: Zustand Migration

### **Status: üìã PLANEJADO**
**Prioridade:** M√©dia | **ETA:** 3-4 dias

### **Objetivo**
Migrar gerenciamento de estado de useState/props para Zustand para melhor escalabilidade.

### **Implementa√ß√£o**

#### **Criar Store Principal**
```typescript
// frontend/stores/workspace-store.ts
import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';
import type { WorkspaceData } from '../types/workspace';

interface WorkspaceStore {
  // State
  workspace: WorkspaceData | null;
  loading: boolean;
  error: string | null;
  viewMode: 'dashboard' | 'kanban' | 'timeline' | 'list';
  
  // Actions
  setWorkspace: (workspace: WorkspaceData | null) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
  setViewMode: (mode: string) => void;
  updateTask: (fileId: string, taskId: string, updates: any) => void;
  
  // Async actions
  loadWorkspace: (projectPath: string) => Promise<void>;
  saveWorkspace: () => Promise<void>;
}

export const useWorkspaceStore = create<WorkspaceStore>()(
  devtools(
    persist(
      (set, get) => ({
        // Initial state
        workspace: null,
        loading: false,
        error: null,
        viewMode: 'dashboard',
        
        // Sync actions
        setWorkspace: (workspace) => set({ workspace }),
        setLoading: (loading) => set({ loading }),
        setError: (error) => set({ error }),
        setViewMode: (viewMode) => set({ viewMode }),
        
        updateTask: (fileId, taskId, updates) => {
          const { workspace } = get();
          if (!workspace) return;
          
          const updatedFiles = workspace.files.map(file => {
            if (file.filePath === fileId) {
              // Update specific task logic
              return { ...file, hasChanges: true };
            }
            return file;
          });
          
          set({ 
            workspace: { 
              ...workspace, 
              files: updatedFiles 
            } 
          });
        },
        
        // Async actions
        loadWorkspace: async (projectPath) => {
          set({ loading: true, error: null });
          try {
            const workspaceData = await window.electronAPI.loadWorkspace(projectPath);
            set({ workspace: workspaceData, loading: false });
          } catch (error) {
            set({ 
              error: error instanceof Error ? error.message : 'Erro desconhecido',
              loading: false 
            });
          }
        },
        
        saveWorkspace: async () => {
          const { workspace } = get();
          if (!workspace) return;
          
          set({ loading: true, error: null });
          try {
            await window.electronAPI.saveWorkspace(workspace);
            // Mark all files as saved
            const updatedFiles = workspace.files.map(f => ({ ...f, hasChanges: false }));
            set({ 
              workspace: { ...workspace, files: updatedFiles },
              loading: false 
            });
          } catch (error) {
            set({ 
              error: error instanceof Error ? error.message : 'Erro ao salvar',
              loading: false 
            });
          }
        }
      }),
      {
        name: 'taskflow-workspace',
        partialize: (state) => ({ viewMode: state.viewMode }) // Only persist view mode
      }
    ),
    { name: 'workspace-store' }
  )
);
```

### **Crit√©rios de Aceite**
- [ ] Store Zustand implementado
- [ ] Componentes migrados para usar store
- [ ] Performance mantida ou melhorada
- [ ] DevTools funcionando
- [ ] Estado persistido adequadamente

---

## üîß Task 5.2: Timeline View

### **Status: üìã AGUARDANDO Task 5.1**
**Prioridade:** M√©dia | **ETA:** 4-5 dias

### **Objetivo**
Implementar visualiza√ß√£o em timeline para mostrar progresso temporal do projeto.

### **Implementa√ß√£o**

#### **Timeline Component**
```typescript
// frontend/components/TimelineView.tsx
import { useMemo } from 'react';
import { useWorkspaceStore } from '@/stores/workspace-store';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';

export function TimelineView() {
  const workspace = useWorkspaceStore(state => state.workspace);
  
  const timelineData = useMemo(() => {
    if (!workspace) return [];
    
    // Group tasks by phase and sort by dates
    const phases = workspace.files.reduce((acc, file) => {
      const phase = file.metadata.phase || 'No Phase';
      if (!acc[phase]) {
        acc[phase] = {
          name: phase,
          tasks: [],
          startDate: null,
          endDate: null,
          progress: 0
        };
      }
      
      // Add tasks from this file
      file.content.phases?.forEach(p => {
        p.tasks?.forEach(task => {
          acc[phase].tasks.push({
            ...task,
            fileName: file.fileName,
            filePhase: p.name
          });
        });
      });
      
      return acc;
    }, {} as Record<string, any>);
    
    // Calculate dates and progress for each phase
    Object.values(phases).forEach((phase: any) => {
      const dates = phase.tasks
        .map((t: any) => t.created || t.updated)
        .filter(Boolean)
        .sort();
      
      phase.startDate = dates[0];
      phase.endDate = dates[dates.length - 1];
      
      const completedTasks = phase.tasks.filter((t: any) => t.status === 'done').length;
      phase.progress = phase.tasks.length > 0 
        ? (completedTasks / phase.tasks.length) * 100 
        : 0;
    });
    
    return Object.values(phases).sort((a: any, b: any) => 
      new Date(a.startDate || 0).getTime() - new Date(b.startDate || 0).getTime()
    );
  }, [workspace]);
  
  if (!workspace) {
    return <div>Nenhum workspace carregado</div>;
  }
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">Timeline do Projeto</h2>
        <Badge variant="outline">
          {timelineData.length} fase(s)
        </Badge>
      </div>
      
      <div className="space-y-4">
        {timelineData.map((phase, index) => (
          <Card key={phase.name} className="relative">
            {/* Timeline connector */}
            {index < timelineData.length - 1 && (
              <div className="absolute left-8 top-full w-0.5 h-4 bg-border" />
            )}
            
            <CardHeader>
              <div className="flex items-center space-x-4">
                {/* Timeline dot */}
                <div className={`w-4 h-4 rounded-full border-2 ${
                  phase.progress === 100 
                    ? 'bg-green-500 border-green-500' 
                    : phase.progress > 0 
                    ? 'bg-blue-500 border-blue-500'
                    : 'bg-background border-border'
                }`} />
                
                <div className="flex-1">
                  <CardTitle className="text-lg">{phase.name}</CardTitle>
                  <div className="flex items-center space-x-4 text-sm text-muted-foreground">
                    <span>{phase.tasks.length} tarefas</span>
                    {phase.startDate && (
                      <span>Iniciado em {new Date(phase.startDate).toLocaleDateString()}</span>
                    )}
                  </div>
                </div>
                
                <div className="text-right">
                  <div className="text-2xl font-bold">{Math.round(phase.progress)}%</div>
                  <Progress value={phase.progress} className="w-24" />
                </div>
              </div>
            </CardHeader>
            
            <CardContent>
              <div className="grid gap-2">
                {phase.tasks.slice(0, 5).map((task: any, taskIndex: number) => (
                  <div key={taskIndex} className="flex items-center justify-between p-2 rounded border">
                    <div className="flex items-center space-x-2">
                      <div className={`w-2 h-2 rounded-full ${
                        task.status === 'done' ? 'bg-green-500' :
                        task.status === 'in-progress' ? 'bg-blue-500' :
                        'bg-gray-300'
                      }`} />
                      <span className="text-sm">{task.title}</span>
                    </div>
                    <Badge variant="outline" className="text-xs">
                      {task.fileName}
                    </Badge>
                  </div>
                ))}
                
                {phase.tasks.length > 5 && (
                  <div className="text-sm text-muted-foreground text-center py-2">
                    +{phase.tasks.length - 5} mais tarefas
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
```

### **Crit√©rios de Aceite**
- [ ] Timeline mostra fases cronologicamente
- [ ] Progress bars funcionais
- [ ] Tarefas agrupadas por fase
- [ ] Design responsivo
- [ ] Performance adequada

---

## üîß Task 5.3: List View

### **Status: üìã AGUARDANDO Task 5.2**
**Prioridade:** Baixa | **ETA:** 2-3 dias

### **Objetivo**
Implementar visualiza√ß√£o em lista simples com filtros e ordena√ß√£o.

### **Implementa√ß√£o**

#### **List View Component**
```typescript
// frontend/components/ListView.tsx
import { useState, useMemo } from 'react';
import { useWorkspaceStore } from '@/stores/workspace-store';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Search, Filter } from 'lucide-react';

export function ListView() {
  const workspace = useWorkspaceStore(state => state.workspace);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [sortBy, setSortBy] = useState('title');
  
  const filteredTasks = useMemo(() => {
    if (!workspace) return [];
    
    // Flatten all tasks from all files
    const allTasks = workspace.files.flatMap(file => 
      file.content.phases?.flatMap(phase => 
        phase.tasks?.map(task => ({
          ...task,
          fileName: file.fileName,
          fileTitle: file.metadata.title,
          phase: phase.name
        })) || []
      ) || []
    );
    
    // Apply filters
    let filtered = allTasks;
    
    if (searchTerm) {
      filtered = filtered.filter(task => 
        task.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        task.description?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    if (statusFilter !== 'all') {
      filtered = filtered.filter(task => task.status === statusFilter);
    }
    
    // Apply sorting
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'title':
          return (a.title || '').localeCompare(b.title || '');
        case 'status':
          return (a.status || '').localeCompare(b.status || '');
        case 'priority':
          const priorityOrder = { high: 3, medium: 2, low: 1 };
          return (priorityOrder[b.priority] || 0) - (priorityOrder[a.priority] || 0);
        case 'created':
          return new Date(b.created || 0).getTime() - new Date(a.created || 0).getTime();
        default:
          return 0;
      }
    });
    
    return filtered;
  }, [workspace, searchTerm, statusFilter, sortBy]);
  
  if (!workspace) {
    return <div>Nenhum workspace carregado</div>;
  }
  
  return (
    <div className="space-y-6">
      {/* Header with filters */}
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">Lista de Tarefas</h2>
        <Badge variant="outline">
          {filteredTasks.length} tarefa(s)
        </Badge>
      </div>
      
      {/* Filters */}
      <div className="flex items-center space-x-4">
        <div className="relative flex-1 max-w-md">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
          <Input
            placeholder="Buscar tarefas..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
        
        <Select value={statusFilter} onValueChange={setStatusFilter}>
          <SelectTrigger className="w-40">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">Todos Status</SelectItem>
            <SelectItem value="todo">A Fazer</SelectItem>
            <SelectItem value="in-progress">Em Progresso</SelectItem>
            <SelectItem value="done">Conclu√≠do</SelectItem>
          </SelectContent>
        </Select>
        
        <Select value={sortBy} onValueChange={setSortBy}>
          <SelectTrigger className="w-40">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="title">T√≠tulo</SelectItem>
            <SelectItem value="status">Status</SelectItem>
            <SelectItem value="priority">Prioridade</SelectItem>
            <SelectItem value="created">Data</SelectItem>
          </SelectContent>
        </Select>
      </div>
      
      {/* Task list */}
      <div className="space-y-2">
        {filteredTasks.map((task, index) => (
          <div key={index} className="flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50">
            <div className="flex-1">
              <div className="flex items-center space-x-2">
                <h3 className="font-medium">{task.title}</h3>
                <Badge variant={
                  task.status === 'done' ? 'default' :
                  task.status === 'in-progress' ? 'secondary' :
                  'outline'
                }>
                  {task.status}
                </Badge>
                {task.priority && (
                  <Badge variant={
                    task.priority === 'high' ? 'destructive' :
                    task.priority === 'medium' ? 'default' :
                    'secondary'
                  }>
                    {task.priority}
                  </Badge>
                )}
              </div>
              
              {task.description && (
                <p className="text-sm text-muted-foreground mt-1">
                  {task.description}
                </p>
              )}
              
              <div className="flex items-center space-x-4 mt-2 text-xs text-muted-foreground">
                <span>{task.fileTitle}</span>
                <span>‚Ä¢</span>
                <span>{task.phase}</span>
                {task.created && (
                  <>
                    <span>‚Ä¢</span>
                    <span>{new Date(task.created).toLocaleDateString()}</span>
                  </>
                )}
              </div>
            </div>
            
            <Button variant="ghost" size="sm">
              Editar
            </Button>
          </div>
        ))}
        
        {filteredTasks.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            Nenhuma tarefa encontrada
          </div>
        )}
      </div>
    </div>
  );
}
```

### **Crit√©rios de Aceite**
- [ ] Lista todas as tarefas de todos os arquivos
- [ ] Busca por t√≠tulo e descri√ß√£o
- [ ] Filtros por status funcionais
- [ ] Ordena√ß√£o por diferentes crit√©rios
- [ ] Performance adequada para muitas tarefas

---

## üîß Task 5.4: Performance Optimization

### **Status: üìã AGUARDANDO Task 5.3**
**Prioridade:** Alta | **ETA:** 3-4 dias

### **Objetivo**
Otimizar performance da aplica√ß√£o para projetos grandes e melhorar responsividade.

### **Implementa√ß√£o**

#### **Virtualization para Listas Grandes**
```typescript
// frontend/components/VirtualizedTaskList.tsx
import { FixedSizeList as List } from 'react-window';
import { useMemo } from 'react';

interface VirtualizedTaskListProps {
  tasks: any[];
  height: number;
}

export function VirtualizedTaskList({ tasks, height }: VirtualizedTaskListProps) {
  const itemData = useMemo(() => ({ tasks }), [tasks]);
  
  const TaskItem = ({ index, style, data }: any) => {
    const task = data.tasks[index];
    
    return (
      <div style={style} className="px-4 py-2 border-b">
        <div className="flex items-center justify-between">
          <span className="font-medium">{task.title}</span>
          <Badge>{task.status}</Badge>
        </div>
      </div>
    );
  };
  
  return (
    <List
      height={height}
      itemCount={tasks.length}
      itemSize={60}
      itemData={itemData}
    >
      {TaskItem}
    </List>
  );
}
```

#### **Memoization e Optimizations**
```typescript
// Optimize heavy computations
const expensiveCalculation = useMemo(() => {
  return workspace?.files.reduce((acc, file) => {
    // Heavy computation here
    return acc;
  }, {});
}, [workspace?.files]);

// Debounce search
const debouncedSearch = useDebounce(searchTerm, 300);

// Lazy loading for components
const TimelineView = lazy(() => import('./TimelineView'));
const ListView = lazy(() => import('./ListView'));
```

### **Crit√©rios de Aceite**
- [ ] Virtualiza√ß√£o para listas grandes (1000+ items)
- [ ] Debounce em buscas
- [ ] Memoization de c√°lculos pesados
- [ ] Lazy loading de views
- [ ] Performance melhorada significativamente

---

## üîß Task 5.5: Advanced Search & Filters

### **Status: üìã AGUARDANDO Task 5.4**
**Prioridade:** Baixa | **ETA:** 2-3 dias

### **Objetivo**
Implementar busca avan√ßada com m√∫ltiplos filtros e operadores.

### **Implementa√ß√£o**

#### **Advanced Search Component**
```typescript
// frontend/components/AdvancedSearch.tsx
import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';

interface SearchFilter {
  field: string;
  operator: string;
  value: string;
}

export function AdvancedSearch({ onSearch }: { onSearch: (filters: SearchFilter[]) => void }) {
  const [filters, setFilters] = useState<SearchFilter[]>([]);
  
  const addFilter = () => {
    setFilters([...filters, { field: 'title', operator: 'contains', value: '' }]);
  };
  
  const removeFilter = (index: number) => {
    setFilters(filters.filter((_, i) => i !== index));
  };
  
  const updateFilter = (index: number, updates: Partial<SearchFilter>) => {
    setFilters(filters.map((filter, i) => 
      i === index ? { ...filter, ...updates } : filter
    ));
  };
  
  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-medium">Busca Avan√ßada</h3>
        <Button onClick={addFilter} size="sm">
          Adicionar Filtro
        </Button>
      </div>
      
      <div className="space-y-2">
        {filters.map((filter, index) => (
          <div key={index} className="flex items-center space-x-2">
            <Select value={filter.field} onValueChange={(value) => updateFilter(index, { field: value })}>
              <SelectTrigger className="w-32">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="title">T√≠tulo</SelectItem>
                <SelectItem value="description">Descri√ß√£o</SelectItem>
                <SelectItem value="status">Status</SelectItem>
                <SelectItem value="priority">Prioridade</SelectItem>
                <SelectItem value="assignee">Respons√°vel</SelectItem>
                <SelectItem value="tags">Tags</SelectItem>
              </SelectContent>
            </Select>
            
            <Select value={filter.operator} onValueChange={(value) => updateFilter(index, { operator: value })}>
              <SelectTrigger className="w-32">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="contains">Cont√©m</SelectItem>
                <SelectItem value="equals">Igual a</SelectItem>
                <SelectItem value="not_equals">Diferente de</SelectItem>
                <SelectItem value="starts_with">Inicia com</SelectItem>
                <SelectItem value="ends_with">Termina com</SelectItem>
              </SelectContent>
            </Select>
            
            <Input
              placeholder="Valor..."
              value={filter.value}
              onChange={(e) => updateFilter(index, { value: e.target.value })}
              className="flex-1"
            />
            
            <Button variant="ghost" size="sm" onClick={() => removeFilter(index)}>
              √ó
            </Button>
          </div>
        ))}
      </div>
      
      {filters.length > 0 && (
        <Button onClick={() => onSearch(filters)} className="w-full">
          Aplicar Filtros
        </Button>
      )}
    </div>
  );
}
```

### **Crit√©rios de Aceite**
- [ ] M√∫ltiplos filtros simult√¢neos
- [ ] Operadores de busca (cont√©m, igual, etc.)
- [ ] Busca por diferentes campos
- [ ] Interface intuitiva
- [ ] Performance adequada

---

## üîß Task 5.6: Export Features

### **Status: üìã AGUARDANDO Task 5.5**
**Prioridade:** Baixa | **ETA:** 2-3 dias

### **Objetivo**
Implementar exporta√ß√£o de dados para diferentes formatos (JSON, CSV, PDF).

### **Implementa√ß√£o**

#### **Export Service**
```typescript
// backend/services/export-service.ts
import * as fs from 'fs/promises';
import * as path from 'path';

export class ExportService {
  async exportToJson(workspace: WorkspaceData, outputPath: string): Promise<void> {
    const exportData = {
      projectName: path.basename(workspace.projectPath),
      exportedAt: new Date().toISOString(),
      files: workspace.files.map(file => ({
        fileName: file.fileName,
        metadata: file.metadata,
        content: file.content
      }))
    };
    
    await fs.writeFile(outputPath, JSON.stringify(exportData, null, 2));
  }
  
  async exportToCsv(workspace: WorkspaceData, outputPath: string): Promise<void> {
    // Flatten all tasks to CSV format
    const tasks = workspace.files.flatMap(file => 
      file.content.phases?.flatMap(phase => 
        phase.tasks?.map(task => ({
          fileName: file.fileName,
          phase: phase.name,
          title: task.title,
          status: task.status,
          priority: task.priority,
          assignee: task.assignee,
          created: task.created,
          updated: task.updated
        })) || []
      ) || []
    );
    
    const csv = [
      'File,Phase,Title,Status,Priority,Assignee,Created,Updated',
      ...tasks.map(task => 
        [task.fileName, task.phase, task.title, task.status, task.priority, task.assignee, task.created, task.updated]
          .map(field => `"${field || ''}"`)
          .join(',')
      )
    ].join('\n');
    
    await fs.writeFile(outputPath, csv);
  }
}
```

### **Crit√©rios de Aceite**
- [ ] Export para JSON completo
- [ ] Export para CSV de tarefas
- [ ] Dialog de sele√ß√£o de formato
- [ ] Progress indicator para exports grandes
- [ ] Valida√ß√£o de caminhos de output

---

## üìà M√©tricas de Sucesso da Fase

### **Performance**
- [ ] Aplica√ß√£o responde em < 100ms para a√ß√µes b√°sicas
- [ ] Suporte para projetos com 100+ arquivos .mdc
- [ ] Uso de mem√≥ria otimizado
- [ ] Startup time < 3 segundos

### **Usabilidade**
- [ ] Todas as views funcionais e intuitivas
- [ ] Busca avan√ßada √∫til e r√°pida
- [ ] Export features funcionais
- [ ] Estado persistido adequadamente

### **Qualidade T√©cnica**
- [ ] C√≥digo bem estruturado com Zustand
- [ ] Performance otimizada
- [ ] Error handling robusto
- [ ] Testes b√°sicos implementados

---

## üöÄ Pr√≥ximos Passos Ap√≥s Fase 5

1. **Testing & QA** - Testes automatizados, valida√ß√£o
2. **Documentation** - Documenta√ß√£o de usu√°rio
3. **Distribution** - Packaging e distribui√ß√£o
4. **Maintenance** - Bug fixes e melhorias cont√≠nuas

---

**√öltima Atualiza√ß√£o:** 22/01/2025  
**Pr√≥xima Revis√£o:** Ap√≥s conclus√£o da Fase 4  
**Respons√°vel:** Equipe de Desenvolvimento


